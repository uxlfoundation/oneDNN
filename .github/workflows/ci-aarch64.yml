# *******************************************************************************
# Copyright 2024-2025 Arm Limited and affiliates.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# *******************************************************************************

name: "CI AArch64"

#* To avoid duplicate jobs running when both push and PR is satisfied, we use this:
#* https://github.com/orgs/community/discussions/26940#discussioncomment-5686753
on:
  push:
    branches: [main, "rls-*"]
    paths:
      - ".github/automation/performance/**"
      - ".github/automation/*"
      - ".github/automation/aarch64/**"
      - ".github/workflows/aarch64-acl.yml"
      - ".github/workflows/ci-aarch64.yml"
      - "cmake/**"
      - "examples/**"
      - "include/**"
      - "src/common/**"
      - "src/cpu/*"
      - "src/cpu/aarch64/**"
      - "tests/**"
      - "CMakeLists.txt"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - ".github/automation/performance/**"
      - ".github/automation/*"
      - ".github/automation/aarch64/**"
      - ".github/workflows/aarch64-acl.yml"
      - ".github/workflows/ci-aarch64.yml"
      - "cmake/**"
      - "examples/**"
      - "include/**"
      - "src/common/**"
      - "src/cpu/*"
      - "src/cpu/aarch64/**"
      - "tests/**"
      - "CMakeLists.txt"
  #* allow manual trigger of workflow when needed.
  workflow_dispatch:

#* Stop stale workflows when pull requests are updated: https://stackoverflow.com/a/70972844
#* Does not apply to the main branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  build-artifacts:
    strategy:
      matrix:
        config: [
          { name: onednn-unit, build: RelWithAssert, testset: CI },
          { name: onednn-perf-base, build: Release, testset: SMOKE },
          { name: onednn-perf-new, build: Release, testset: SMOKE }
        ]
    name: build ${{ matrix.config.name }}
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout oneDNN
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            path: oneDNN
    
      - name: Read version file
        if: ${{ matrix.config.name == 'onednn-perf-base' }}
        id: get-versions
        run: |
          content=`cat ${{ github.workspace }}/oneDNN/.github/automation/aarch64/ci.json`
          content="${content//[$'\t\r\n$ ']}"
          echo "output=$content" >> $GITHUB_OUTPUT

      - name: Build oneDNN
        uses: ./oneDNN/.github/actions/build-onednn-aarch64
        with:
          artifact_name: ${{ matrix.config.name }}
          threading: OMP
          toolset: gcc
          build: ${{ matrix.config.build }}
          testset: ${{ matrix.config.testset }}
          onednn_hash: ${{ matrix.config.name == 'onednn-perf-base' && fromJson(steps.get-versions.outputs.output).dependencies.onednn-base || '' }}
          cache: ${{ matrix.config.name == 'onednn-perf-base' && 'true' || 'false'}}

  smoke-test:
    strategy:
      matrix:
        config: [
          { name: MacOS, label: macos-14, threading: SEQ, toolset: clang, build: RelWithAssert, testset: SMOKE },
          { name: cb100, label: ubuntu-24.04-arm, threading: OMP, toolset: clang, build: RelWithAssert, testset: SMOKE },
        ]

    name: ${{ matrix.config.name }}, ${{ matrix.config.toolset }}, ${{ matrix.config.threading }}, ${{ matrix.config.build }}
    runs-on: ${{ matrix.config.label }}
    steps:
      - name: Checkout oneDNN
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: oneDNN

      - name: Read version file
        id: get-versions
        run: |
          content=`cat ${{ github.workspace }}/oneDNN/.github/automation/aarch64/ci.json`
          content="${content//[$'\t\r\n$ ']}"
          echo "output=$content" >> $GITHUB_OUTPUT

      # Note: This will create a github actions cache
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@56d043d188c3612951d8755da8f4b709ec951ad6 # v3.31.6
        with:
          cmakeVersion: 3.31.0
          ninjaVersion: 1.12.0

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.threading == 'OMP')) }}
        name: Install openmp
        run: |
          sudo apt install -y libomp-dev

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.toolset == 'gcc')) }}
        name: Install gcc
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update -y
          sudo apt install -y g++-${{ fromJson(steps.get-versions.outputs.output).dependencies.gcc }}

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.toolset == 'clang')) }}
        name: Install clang
        uses: KyleMayes/install-llvm-action@98e68e10c96dffcb7bfed8b2144541a66b49aa02 # v2.0.8
        with:
          version: ${{ fromJson(steps.get-versions.outputs.output).dependencies.clang }}

      - name: Build oneDNN
        uses: ./oneDNN/.github/actions/build-onednn-aarch64
        with:
          threading: ${{ matrix.config.threading }}
          toolset: ${{ matrix.config.toolset }}
          build: ${{ matrix.config.build }}
          testset: ${{ matrix.config.testset }}

      - name: Run oneDNN tests
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/test.sh ${{ github.workspace }}/test_results.xml
        working-directory: ${{ github.workspace }}/oneDNN_pkg/oneDNN/build
        env:
          CTEST_PARALLEL_LEVEL: 6
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/oneDNN_pkg/ComputeLibrary/build:${{ github.workspace }}/oneDNN_pkg/oneDNN/build/src
          ONEDNN_THREADING: ${{ matrix.config.threading }}

  unit-test:
    needs: build-artifacts
    strategy:
      matrix:
        config: [
          { name: c6g, label: ah-ubuntu_22_04-c6g_4x-50 },
          { name: c7g, label: ah-ubuntu_22_04-c7g_4x-50 },
          { name: c8g, label: ah-ubuntu_22_04-c8g_8x },
        ]

    name: ${{ matrix.config.name }} unit test
    runs-on: ${{ matrix.config.label }}
    steps:
      - name: Checkout oneDNN
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: oneDNN

      - name: Read version file
        id: get-versions
        run: |
          content=`cat ${{ github.workspace }}/oneDNN/.github/automation/aarch64/ci.json`
          content="${content//[$'\t\r\n$ ']}"
          echo "output=$content" >> $GITHUB_OUTPUT

      # Note: This will create a github actions cache
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@56d043d188c3612951d8755da8f4b709ec951ad6 # v3.31.6
        with:
          cmakeVersion: 3.31.0
          ninjaVersion: 1.12.0

      - name: Install dependencies
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update -y
          sudo apt install -y libomp-dev g++-${{ fromJson(steps.get-versions.outputs.output).dependencies.gcc }}

      - name: Download oneDNN
        uses: actions/download-artifact@v5
        with:
          name: onednn-unit
          path: oneDNN_pkg
      
      - name: Prepare oneDNN for execution
        run: chmod -R +x oneDNN_pkg

      - name: Run oneDNN tests
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/test.sh ${{ github.workspace }}/test_results.xml ${{ github.workspace }}/test_results.log
        working-directory: ${{ github.workspace }}/oneDNN_pkg/oneDNN/build
        env:
          CTEST_PARALLEL_LEVEL: 6
          LD_LIBRARY_PATH: ${{ github.workspace }}/oneDNN_pkg/ComputeLibrary/build

  perf-test:
    needs: build-artifacts
    strategy:
      matrix:
        config: [
          { name: c6g, label: ah-ubuntu_22_04-c6g_4x-50 },
          { name: c7g, label: ah-ubuntu_22_04-c7g_4x-50 },
          { name: c8g, label: ah-ubuntu_22_04-c8g_8x },
        ]

    name: ${{ matrix.config.name }} perf test
    runs-on: ${{ matrix.config.label }}
    steps:
      - name: Checkout oneDNN
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            path: oneDNN

      - name: Read version file
        id: get-versions
        run: |
          content=`cat ${{ github.workspace }}/oneDNN/.github/automation/aarch64/ci.json`
          content="${content//[$'\t\r\n$ ']}"
          echo "output=$content" >> $GITHUB_OUTPUT

      - name: setup python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: bash
        run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
            sudo apt update -y
            sudo apt install -y patchelf libomp-dev g++-${{ fromJson(steps.get-versions.outputs.output).dependencies.gcc }}
            pip install scipy statistics gitpython

      - name: Download oneDNN base
        uses: actions/download-artifact@v5
        with:
          name: onednn-perf-base
          path: oneDNN_pkg
      
      - name: Prepare oneDNN base for execution
        run: |
          mv oneDNN_pkg oneDNN_base
          chmod -R +x oneDNN_base
          patchelf --add-rpath ${{ github.workspace }}/oneDNN_base/ComputeLibrary/build ${{ github.workspace }}/oneDNN_base/oneDNN/build/src/libdnnl.so.3

      - name: Download oneDNN new
        uses: actions/download-artifact@v5
        with:
          name: onednn-perf-new
          path: oneDNN_pkg
      
      - name: Prepare oneDNN new for execution
        run: |
          mv oneDNN_pkg oneDNN_new
          chmod -R +x oneDNN_new
          patchelf --add-rpath ${{ github.workspace }}/oneDNN_new/ComputeLibrary/build ${{ github.workspace }}/oneDNN_new/oneDNN/build/src/libdnnl.so.3

      - name: Run performance tests
        shell: bash
        run: |
          OMP_NUM_THREADS=4 bash ${{ github.workspace }}/oneDNN/.github/automation/performance/bench_pr_performance.sh ${{ github.workspace }}/oneDNN_base/oneDNN/build/tests/benchdnn/benchdnn ${{ github.workspace }}/oneDNN_new/oneDNN/build/tests/benchdnn/benchdnn base_4.txt new_4.txt
          OMP_NUM_THREADS=16 bash ${{ github.workspace }}/oneDNN/.github/automation/performance/bench_pr_performance.sh ${{ github.workspace }}/oneDNN_base/oneDNN/build/tests/benchdnn/benchdnn ${{ github.workspace }}/oneDNN_new/oneDNN/build/tests/benchdnn/benchdnn base_16.txt new_16.txt

      - name: Compare performance test results
        id: performance-test
        continue-on-error: true
        run: |
          echo "4 threads:"
          python ${{ github.workspace }}/oneDNN/.github/automation/performance/benchdnn_comparison.py base_4.txt new_4.txt
          echo "16 threads:"
          python ${{ github.workspace }}/oneDNN/.github/automation/performance/benchdnn_comparison.py base_16.txt new_16.txt

      - name: Check performance test failure
        if: ${{ steps.performance-test.outputs.pass != 'True' }}
        run: echo "::warning file=.github/workflows/ci-aarch64.yml,line=1,col=1::${{ steps.performance-test.outputs.message }}"

  # This job adds a check named "CI AArch64" that represents overall
  # workflow status and can be used in branch rulesets
  status:
    needs: [smoke-test, unit-test, perf-test]
    runs-on: ubuntu-latest
    name: "CI AArch64"
    steps:
      - name: Print success
        run: echo Success
