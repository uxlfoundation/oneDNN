# *******************************************************************************
# Copyright 2024-2025 Arm Limited and affiliates.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# *******************************************************************************

name: "clang-tidy for AArch64"

#* To avoid duplicate jobs running when both push and PR is satisfied, we use this:
#* https://github.com/orgs/community/discussions/26940#discussioncomment-5686753
on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    paths:
      - ".github/workflow/*"
      - "src/cpu/aarch64/**"
  #* allow manual trigger of workflow when needed.
  workflow_dispatch:

#* Stop stale workflows when pull requests are updated: https://stackoverflow.com/a/70972844
#* Does not apply to the main branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  build-acl-cache:
    uses: ./.github/workflows/aarch64-acl.yml

  pr-clang-tidy-aarch64:
    needs: build-acl-cache
    strategy:
      matrix:
        config: [
          { name: cb100, label: ubuntu-24.04-arm, threading: OMP, toolset: clang, build: Debug, testset: NO_CORR },
          { name: c6g, label: ah-ubuntu_22_04-c6g_4x-50, threading: OMP, toolset: clang, build: Debug, testset: NO_CORR },
        ]

    name: ${{ matrix.config.name }}, ${{ matrix.config.toolset }}, ${{ matrix.config.threading }}, ${{ matrix.config.build }}
    runs-on: ${{ matrix.config.label }}
    steps:
      - name: Checkout oneDNN
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: oneDNN

      - name: Read version file
        id: get-versions
        run: |
          content=`cat ${{ github.workspace }}/oneDNN/.github/automation/aarch64/ci.json`
          content="${content//[$'\t\r\n$ ']}"
          echo "output=$content" >> $GITHUB_OUTPUT

      # Note: This will create a github actions cache
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@56d043d188c3612951d8755da8f4b709ec951ad6 # v3.31.6
        with:
          cmakeVersion: 3.31.0
          ninjaVersion: 1.12.0

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.threading == 'OMP')) }}
        name: Install openmp
        run: |
          sudo apt install -y libomp-dev

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.toolset == 'clang')) }}
        name: Install clang
        uses: KyleMayes/install-llvm-action@a7a1a882e2d06ebe05d5bb97c3e1f8c984ae96fc
        with:
          version: ${{ fromJson(steps.get-versions.outputs.output).dependencies.clang }}

      - name: Clone ACL
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/build_acl.sh
        env:
          ACL_ACTION: clone
          ACL_ROOT_DIR: ${{ github.workspace }}/ComputeLibrary
          ACL_VERSION: ${{ fromJson(steps.get-versions.outputs.output).dependencies.acl }}

      - name: Get ACL commit hash for cache key
        id: get_acl_commit_hash
        run: (cd ${{ github.workspace }}/ComputeLibrary && echo "ACLCommitHash=$(git rev-parse --short HEAD)") >> $GITHUB_OUTPUT

      - name: Get system name
        id: get_system_name
        run: (echo "SystemName=$(uname)") >> $GITHUB_OUTPUT

      - name: Restore cached ACL
        id: cache-acl-restore
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          key: ${{ steps.get_system_name.outputs.SystemName }}-acl-${{ matrix.config.toolset }}-${{ matrix.config.build }}-${{ steps.get_acl_commit_hash.outputs.ACLCommitHash }}
          path: ${{ github.workspace }}/ComputeLibrary/build
          fail-on-cache-miss: true

      - name: Configure oneDNN
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/build.sh
        working-directory: ${{ github.workspace }}/oneDNN
        env:
          ACL_ROOT_DIR: ${{ github.workspace }}/ComputeLibrary
          BUILD_TOOLSET: ${{ matrix.config.toolset }}
          CMAKE_BUILD_TYPE: ${{ matrix.config.build }}
          CMAKE_GENERATOR: Ninja
          GCC_VERSION: ${{ fromJson(steps.get-versions.outputs.output).dependencies.gcc }}
          ONEDNN_ACTION: configure
          ONEDNN_TEST_SET: ${{ matrix.config.testset }}
          ONEDNN_THREADING: ${{ matrix.config.threading }}

      - name: Build oneDNN
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/build.sh
        working-directory: ${{ github.workspace }}/oneDNN
        env:
          ONEDNN_ACTION: build

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.threading == 'OMP')) }}
        name: Install clang-tidy
        run: |
          sudo apt install -y clang-tidy

      - name: Check source files
        run: |
          echo -e "Checking Clang-Tidy $(clang-tidy --version)\n"
          touch clang-tidy.log
          for file in $(git diff --name-only ${{ github.event.pull_request.base.sha }} | grep -E '\.cpp$');
          do
            if grep -q "$file" "build/compile_commands.json"; then
              echo -e "\nAnalyzing $file"
              clang-tidy -p build $file 2>&1 | tee -a clang-tidy.log
            else
              echo "Skipped $file as it's not specific to AArch64 OpenMP configuration."
            fi
          done
          grep -i -E "warning:|error:" clang-tidy.log | sort -u
          grep -q -i -E "warning:|error:" clang-tidy-aarch64.log && exit 1 || true
